// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://www.github.com/huaweicloud/magic-modules
//
// ----------------------------------------------------------------------------

package huaweicloud

import (
	"fmt"
	"log"
	"reflect"

	"github.com/hashicorp/terraform/helper/schema"
	"github.com/huaweicloud/golangsdk"
)

func resourceCsRouteV1() *schema.Resource {
	return &schema.Resource{
		Create: resourceCsRouteV1Create,
		Read:   resourceCsRouteV1Read,
		Delete: resourceCsRouteV1Delete,

		Schema: map[string]*schema.Schema{
			"cluster_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"destination": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"peering_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},
		},
	}
}

func resourceCsRouteV1UserInputParams(d *schema.ResourceData) map[string]interface{} {
	return map[string]interface{}{
		"terraform_resource_data": d,
		"cluster_id":              d.Get("cluster_id"),
		"destination":             d.Get("destination"),
		"peering_id":              d.Get("peering_id"),
	}
}

func resourceCsRouteV1Create(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	client, err := config.sdkClient(GetRegion(d, config), "cs", serviceProjectLevel)
	if err != nil {
		return fmt.Errorf("Error creating sdk client, err=%s", err)
	}

	opts := resourceCsRouteV1UserInputParams(d)

	params, err := buildCsRouteV1CreateParameters(opts, nil)
	if err != nil {
		return fmt.Errorf("Error building the request body of api(create), err=%s", err)
	}
	r, err := sendCsRouteV1CreateRequest(d, params, client)
	if err != nil {
		return fmt.Errorf("Error creating CsRouteV1, err=%s", err)
	}

	id, err := navigateValue(r, []string{"route", "id"}, nil)
	if err != nil {
		return fmt.Errorf("Error constructing id, err=%s", err)
	}
	d.SetId(convertToStr(id))

	return resourceCsRouteV1Read(d, meta)
}

func resourceCsRouteV1Read(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	client, err := config.sdkClient(GetRegion(d, config), "cs", serviceProjectLevel)
	if err != nil {
		return fmt.Errorf("Error creating sdk client, err=%s", err)
	}

	res := make(map[string]interface{})

	v, err := sendCsRouteV1ReadRequest(d, client)
	if err != nil {
		return err
	}
	res["read"] = fillCsRouteV1ReadRespBody(v)

	states, err := flattenCsRouteV1Options(res)
	if err != nil {
		return err
	}

	return setCsRouteV1States(d, states)
}

func resourceCsRouteV1Delete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	client, err := config.sdkClient(GetRegion(d, config), "cs", serviceProjectLevel)
	if err != nil {
		return fmt.Errorf("Error creating sdk client, err=%s", err)
	}

	url, err := replaceVars(d, "reserved_cluster/{cluster_id}/peering/{peering_id}/route/{id}", nil)
	if err != nil {
		return err
	}
	url = client.ServiceURL(url)

	log.Printf("[DEBUG] Deleting Route %q", d.Id())
	r := golangsdk.Result{}
	_, r.Err = client.Delete(url, &golangsdk.RequestOpts{
		OkCodes:      successHTTPCodes,
		JSONBody:     nil,
		JSONResponse: nil,
		MoreHeaders:  map[string]string{"Content-Type": "application/json"},
	})
	if r.Err != nil {
		return fmt.Errorf("Error deleting Route %q, err=%s", d.Id(), r.Err)
	}

	return nil
}

func buildCsRouteV1CreateParameters(opts map[string]interface{}, arrayIndex map[string]int) (interface{}, error) {
	params := make(map[string]interface{})

	v, err := navigateValue(opts, []string{"destination"}, arrayIndex)
	if err != nil {
		return nil, err
	}
	if e, err := isEmptyValue(reflect.ValueOf(v)); err != nil {
		return nil, err
	} else if !e {
		params["destination"] = v
	}

	return params, nil
}

func sendCsRouteV1CreateRequest(d *schema.ResourceData, params interface{},
	client *golangsdk.ServiceClient) (interface{}, error) {
	url, err := replaceVars(d, "reserved_cluster/{cluster_id}/peering/{peering_id}/route", nil)
	if err != nil {
		return nil, err
	}
	url = client.ServiceURL(url)

	r := golangsdk.Result{}
	_, r.Err = client.Post(url, params, &r.Body, &golangsdk.RequestOpts{
		OkCodes: successHTTPCodes,
	})
	if r.Err != nil {
		return nil, fmt.Errorf("Error running api(create), err=%s", r.Err)
	}
	return r.Body, nil
}

func sendCsRouteV1ReadRequest(d *schema.ResourceData, client *golangsdk.ServiceClient) (interface{}, error) {
	url, err := replaceVars(d, "reserved_cluster/{cluster_id}/peering/{peering_id}/route/{id}", nil)
	if err != nil {
		return nil, err
	}
	url = client.ServiceURL(url)

	r := golangsdk.Result{}
	_, r.Err = client.Get(url, &r.Body, &golangsdk.RequestOpts{
		MoreHeaders: map[string]string{"Content-Type": "application/json"}})
	if r.Err != nil {
		return nil, fmt.Errorf("Error running api(read) for resource(CsRouteV1), err=%s", r.Err)
	}

	v, err := navigateValue(r.Body, []string{"route"}, nil)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func fillCsRouteV1ReadRespBody(body interface{}) interface{} {
	result := make(map[string]interface{})
	val, ok := body.(map[string]interface{})
	if !ok {
		val = make(map[string]interface{})
	}

	if v, ok := val["destination"]; ok {
		result["destination"] = v
	} else {
		result["destination"] = nil
	}

	return result
}

func flattenCsRouteV1Options(response map[string]interface{}) (map[string]interface{}, error) {
	opts := make(map[string]interface{})

	v, err := navigateValue(response, []string{"read", "destination"}, nil)
	if err != nil {
		return nil, fmt.Errorf("Error flattening Route:destination, err: %s", err)
	}
	opts["destination"] = v

	return opts, nil
}

func setCsRouteV1States(d *schema.ResourceData, opts map[string]interface{}) error {
	for k, v := range opts {
		if err := d.Set(k, v); err != nil {
			return fmt.Errorf("Error setting CsRouteV1:%s, err: %s", k, err)
		}
	}
	return nil
}

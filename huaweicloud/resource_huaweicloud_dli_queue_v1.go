// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://www.github.com/huaweicloud/magic-modules
//
// ----------------------------------------------------------------------------

package huaweicloud

import (
	"fmt"
	"log"
	"reflect"

	"github.com/hashicorp/terraform/helper/schema"
	"github.com/huaweicloud/golangsdk"
)

func resourceDliQueueV1() *schema.Resource {
	return &schema.Resource{
		Create: resourceDliQueueV1Create,
		Read:   resourceDliQueueV1Read,
		Delete: resourceDliQueueV1Delete,

		Schema: map[string]*schema.Schema{
			"cu_count": {
				Type:     schema.TypeInt,
				Required: true,
				ForceNew: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"cidr_in_mgntsubnet": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
			},

			"cidr_in_subnet": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
			},

			"cidr_in_vpc": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
			},

			"description": {
				Type:     schema.TypeString,
				Computed: true,
				Optional: true,
				ForceNew: true,
			},

			"create_time": {
				Type:     schema.TypeInt,
				Computed: true,
			},
		},
	}
}

func resourceDliQueueV1UserInputParams(d *schema.ResourceData) map[string]interface{} {
	return map[string]interface{}{
		"terraform_resource_data": d,
		"cidr_in_mgntsubnet":      d.Get("cidr_in_mgntsubnet"),
		"cidr_in_subnet":          d.Get("cidr_in_subnet"),
		"cidr_in_vpc":             d.Get("cidr_in_vpc"),
		"cu_count":                d.Get("cu_count"),
		"description":             d.Get("description"),
		"name":                    d.Get("name"),
	}
}

func resourceDliQueueV1Create(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	client, err := config.sdkClient(GetRegion(d, config), "dli", serviceProjectLevel)
	if err != nil {
		return fmt.Errorf("Error creating sdk client, err=%s", err)
	}

	opts := resourceDliQueueV1UserInputParams(d)

	params, err := buildDliQueueV1CreateParameters(opts, nil)
	if err != nil {
		return fmt.Errorf("Error building the request body of api(create), err=%s", err)
	}
	r, err := sendDliQueueV1CreateRequest(d, params, client)
	if err != nil {
		return fmt.Errorf("Error creating DliQueueV1, err=%s", err)
	}

	id, err := navigateValue(r, []string{"queue_name"}, nil)
	if err != nil {
		return fmt.Errorf("Error constructing id, err=%s", err)
	}
	d.SetId(id.(string))

	return resourceDliQueueV1Read(d, meta)
}

func resourceDliQueueV1Read(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	client, err := config.sdkClient(GetRegion(d, config), "dli", serviceProjectLevel)
	if err != nil {
		return fmt.Errorf("Error creating sdk client, err=%s", err)
	}

	res := make(map[string]interface{})

	v, err := sendDliQueueV1ReadRequest(d, client)
	if err != nil {
		return err
	}
	res["read"] = fillDliQueueV1ReadRespBody(v)

	states, err := flattenDliQueueV1Options(res)
	if err != nil {
		return err
	}

	return setDliQueueV1States(d, states)
}

func resourceDliQueueV1Delete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	client, err := config.sdkClient(GetRegion(d, config), "dli", serviceProjectLevel)
	if err != nil {
		return fmt.Errorf("Error creating sdk client, err=%s", err)
	}

	url, err := replaceVars(d, "queues/{id}", nil)
	if err != nil {
		return err
	}
	url = client.ServiceURL(url)

	log.Printf("[DEBUG] Deleting Queue %q", d.Id())
	r := golangsdk.Result{}
	_, r.Err = client.Delete(url, &golangsdk.RequestOpts{
		OkCodes:      successHTTPCodes,
		JSONBody:     nil,
		JSONResponse: &r.Body,
		MoreHeaders:  map[string]string{"Content-Type": "application/json"},
	})
	if r.Err != nil {
		return fmt.Errorf("Error deleting Queue %q, err=%s", d.Id(), r.Err)
	}

	return nil
}

func buildDliQueueV1CreateParameters(opts map[string]interface{}, arrayIndex map[string]int) (interface{}, error) {
	params := make(map[string]interface{})

	params["charging_mode"] = 1

	v, err := navigateValue(opts, []string{"cidr_in_mgntsubnet"}, arrayIndex)
	if err != nil {
		return nil, err
	}
	if e, err := isEmptyValue(reflect.ValueOf(v)); err != nil {
		return nil, err
	} else if !e {
		params["cidr_in_mgntsubnet"] = v
	}

	v, err = navigateValue(opts, []string{"cidr_in_subnet"}, arrayIndex)
	if err != nil {
		return nil, err
	}
	if e, err := isEmptyValue(reflect.ValueOf(v)); err != nil {
		return nil, err
	} else if !e {
		params["cidr_in_subnet"] = v
	}

	v, err = navigateValue(opts, []string{"cidr_in_vpc"}, arrayIndex)
	if err != nil {
		return nil, err
	}
	if e, err := isEmptyValue(reflect.ValueOf(v)); err != nil {
		return nil, err
	} else if !e {
		params["cidr_in_vpc"] = v
	}

	v, err = navigateValue(opts, []string{"cu_count"}, arrayIndex)
	if err != nil {
		return nil, err
	}
	if e, err := isEmptyValue(reflect.ValueOf(v)); err != nil {
		return nil, err
	} else if !e {
		params["cu_count"] = v
	}

	v, err = navigateValue(opts, []string{"description"}, arrayIndex)
	if err != nil {
		return nil, err
	}
	if e, err := isEmptyValue(reflect.ValueOf(v)); err != nil {
		return nil, err
	} else if !e {
		params["description"] = v
	}

	v, err = navigateValue(opts, []string{"name"}, arrayIndex)
	if err != nil {
		return nil, err
	}
	if e, err := isEmptyValue(reflect.ValueOf(v)); err != nil {
		return nil, err
	} else if !e {
		params["queue_name"] = v
	}

	return params, nil
}

func sendDliQueueV1CreateRequest(d *schema.ResourceData, params interface{},
	client *golangsdk.ServiceClient) (interface{}, error) {
	url := client.ServiceURL("queues")

	r := golangsdk.Result{}
	_, r.Err = client.Post(url, params, &r.Body, &golangsdk.RequestOpts{
		OkCodes: successHTTPCodes,
	})
	if r.Err != nil {
		return nil, fmt.Errorf("Error running api(create), err=%s", r.Err)
	}
	return r.Body, nil
}

func sendDliQueueV1ReadRequest(d *schema.ResourceData, client *golangsdk.ServiceClient) (interface{}, error) {
	url, err := replaceVars(d, "queues/{id}", nil)
	if err != nil {
		return nil, err
	}
	url = client.ServiceURL(url)

	r := golangsdk.Result{}
	_, r.Err = client.Get(url, &r.Body, &golangsdk.RequestOpts{
		MoreHeaders: map[string]string{"Content-Type": "application/json"}})
	if r.Err != nil {
		return nil, fmt.Errorf("Error running api(read) for resource(DliQueueV1), err=%s", r.Err)
	}

	return r.Body, nil
}

func fillDliQueueV1ReadRespBody(body interface{}) interface{} {
	result := make(map[string]interface{})
	val, ok := body.(map[string]interface{})
	if !ok {
		val = make(map[string]interface{})
	}

	if v, ok := val["create_time"]; ok {
		result["create_time"] = v
	} else {
		result["create_time"] = nil
	}

	if v, ok := val["cu_count"]; ok {
		result["cu_count"] = v
	} else {
		result["cu_count"] = nil
	}

	if v, ok := val["description"]; ok {
		result["description"] = v
	} else {
		result["description"] = nil
	}

	if v, ok := val["queue_name"]; ok {
		result["queue_name"] = v
	} else {
		result["queue_name"] = nil
	}

	return result
}

func flattenDliQueueV1Options(response map[string]interface{}) (map[string]interface{}, error) {
	opts := make(map[string]interface{})

	v, err := navigateValue(response, []string{"read", "create_time"}, nil)
	if err != nil {
		return nil, fmt.Errorf("Error flattening Queue:create_time, err: %s", err)
	}
	opts["create_time"] = v

	v, err = navigateValue(response, []string{"read", "cu_count"}, nil)
	if err != nil {
		return nil, fmt.Errorf("Error flattening Queue:cu_count, err: %s", err)
	}
	opts["cu_count"] = v

	v, err = navigateValue(response, []string{"read", "description"}, nil)
	if err != nil {
		return nil, fmt.Errorf("Error flattening Queue:description, err: %s", err)
	}
	opts["description"] = v

	v, err = navigateValue(response, []string{"read", "queue_name"}, nil)
	if err != nil {
		return nil, fmt.Errorf("Error flattening Queue:name, err: %s", err)
	}
	opts["name"] = v

	return opts, nil
}

func setDliQueueV1States(d *schema.ResourceData, opts map[string]interface{}) error {
	for k, v := range opts {
		if err := d.Set(k, v); err != nil {
			return fmt.Errorf("Error setting DliQueueV1:%s, err: %s", k, err)
		}
	}
	return nil
}

// Generated by PMS #2
package vpc

import (
	"context"
	"fmt"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/jmespath/go-jmespath"
	"github.com/tidwall/gjson"

	"github.com/chnsz/golangsdk"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/hashcode"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceVpcAddressGroups() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceVpcAddressGroupsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `Provides supplementary information about an IP address group,
which can be used to filter the IP address group.`,
			},
			"group_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Unique ID of an IP address group, which can be used to filter the IP address group.`,
			},
			"ip_version": {
				Type:     schema.TypeInt,
				Optional: true,
				Description: `Version of IP addresses in an IP address group,
which can be used to filter the IP address group.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Name of an IP address group, which can be used to filter the IP address group.`,
			},
			"address_groups": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The IP address groups.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"addresses": {
							Type:     schema.TypeList,
							Computed: true,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Description: `IP address sets in an IP address group.
Value range: a single IP address, IP address range, or CIDR block.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time when the IP address group is created.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The supplementary information about the IP address group.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Enterprise project ID.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `IP address group ID, which uniquely identifies the IP address group.`,
						},
						"ip_extra_set": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `IP addresses and their remarks in an IP address group.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `An IP address, IP address range, or CIDR block.`,
									},
									"remarks": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Provides supplementary information about the IP address, IP address range, or CIDR block.`,
									},
								},
							},
						},
						"ip_version": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Whether it is an IPv4 or IPv6 address group.`,
						},
						"max_capacity": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: `Maximum number of entries in an address group,
which limits the number of addresses that can be contained in an address group.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `IP address group name.`,
						},
						"status": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The status of IP address group. Valid values are:
  + ` + "`" + `NORMAL` + "`" + `: normal status.
  + ` + "`" + `UPDATING` + "`" + `: updating.
  + ` + "`" + `UPDATE_FAILED` + "`" + `: update failed.
When the status of IP address group is ` + "`" + `UPDATING` + "`" + `, the IP address group cannot be updated again.`,
						},
						"status_message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status details of IP address group.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time when the IP address group was last updated.`,
						},
					},
				},
			},
		},
	}
}

type AddressGroupsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAddressGroupsDSWrapper(d *schema.ResourceData, meta interface{}) *AddressGroupsDSWrapper {
	return &AddressGroupsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceVpcAddressGroupsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAddressGroupsDSWrapper(d, meta)
	rst, err := wrapper.ListAddressGroup()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listAddressGroupToSchema(rst)
	if err != nil {
		return diag.FromErr(err)
	}

	r, err := jmespath.Search("sort_by(address_groups, &id)[*].id", rst.Value())
	if err != nil {
		return diag.FromErr(err)
	}
	ids := make([]string, 0)
	arr, _ := r.([]any)
	for _, v := range arr {
		ids = append(ids, v.(string))
	}
	d.SetId(hashcode.Strings(ids))
	return nil
}

// @API VPC GET /v3/{project_id}/vpc/address-groups
func (w *AddressGroupsDSWrapper) ListAddressGroup() (*gjson.Result, error) {
	client, err := w.initClient("vpc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/vpc/address-groups"
	params := map[string]any{
		"id":          w.StrToSlice("group_id"),
		"name":        w.StrToSlice("name"),
		"ip_version":  w.Get("ip_version"),
		"description": w.StrToSlice("description"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("address_groups", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *AddressGroupsDSWrapper) listAddressGroupToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("address_groups", schemas.SliceToList(body.Get("address_groups"), func(addressGroupsData gjson.Result) any {
			return map[string]any{
				"addresses":             schemas.SliceToStrList(addressGroupsData.Get("ip_set")),
				"created_at":            addressGroupsData.Get("created_at").String(),
				"description":           addressGroupsData.Get("description").String(),
				"enterprise_project_id": addressGroupsData.Get("enterprise_project_id").String(),
				"id":                    addressGroupsData.Get("id").String(),
				"ip_extra_set": schemas.SliceToList(addressGroupsData.Get("ip_extra_set"), func(ipExtraSetData gjson.Result) any {
					return map[string]any{
						"ip":      ipExtraSetData.Get("ip").String(),
						"remarks": ipExtraSetData.Get("remarks").String(),
					}
				}),
				"ip_version":     addressGroupsData.Get("ip_version").Int(),
				"max_capacity":   addressGroupsData.Get("max_capacity").Int(),
				"name":           addressGroupsData.Get("name").String(),
				"status":         addressGroupsData.Get("status").String(),
				"status_message": addressGroupsData.Get("status_message").String(),
				"updated_at":     addressGroupsData.Get("updated_at").String(),
			}
		})),
	)
	return mErr.ErrorOrNil()
}

func (w *AddressGroupsDSWrapper) initClient(serviceName string) (*golangsdk.ServiceClient, error) {
	region := w.Config.GetRegion(w.ResourceData)
	client, err := w.Config.NewServiceClient(serviceName, region)
	if err != nil {
		return nil, fmt.Errorf("error creating %s client: %s", serviceName, err)
	}

	return client, nil
}

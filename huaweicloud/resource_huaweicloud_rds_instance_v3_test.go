// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://www.github.com/huaweicloud/magic-modules
//
// ----------------------------------------------------------------------------

package huaweicloud

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
	"github.com/huaweicloud/golangsdk"
)

func TestAccRdsInstanceV3_basic(t *testing.T) {
	name := acctest.RandString(10)
	resourceName := "huaweicloud_rds_instance.myinstance"

	resource.ParallelTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckRdsInstanceV3Destroy,
		Steps: []resource.TestStep{
			{
				Config: testAccRdsInstanceV3_basic(name),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckRdsInstanceV3Exists(),
					resource.TestCheckResourceAttr(resourceName, "name", fmt.Sprintf("rds-test-instance-%s", name)),
					resource.TestCheckResourceAttr(resourceName, "backup_strategy.0.keep_days", "1"),
					resource.TestCheckResourceAttr(resourceName, "volume.0.size", "40"),
					resource.TestCheckResourceAttr(resourceName, "tags.key", "value"),
					resource.TestCheckResourceAttr(resourceName, "tags.foo", "bar"),
					resource.TestCheckResourceAttr(resourceName, "time_zone", "UTC+09:00"),
				),
			},
			{
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
				ImportStateVerifyIgnore: []string{
					"db",
				},
			},
			{
				Config: testAccRdsInstanceV3_update(name),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckRdsInstanceV3Exists(),
					resource.TestCheckResourceAttr(resourceName, "name", fmt.Sprintf("rds-test-instance-%s", name)),
					resource.TestCheckResourceAttr(resourceName, "backup_strategy.0.keep_days", "2"),
					resource.TestCheckResourceAttr(resourceName, "volume.0.size", "50"),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value"),
					resource.TestCheckResourceAttr(resourceName, "tags.foo", "bar_updated"),
				),
			},
		},
	})
}

func TestAccRdsInstanceV3_withEpsId(t *testing.T) {
	name := acctest.RandString(10)
	resourceName := "huaweicloud_rds_instance.myinstance"
	resource.ParallelTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheckEpsID(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckRdsInstanceV3Destroy,
		Steps: []resource.TestStep{
			{
				Config: testAccRdsInstanceV3_epsId(name),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckRdsInstanceV3Exists(),
					resource.TestCheckResourceAttr(resourceName, "enterprise_project_id", HW_ENTERPRISE_PROJECT_ID_TEST),
				),
			},
		},
	})
}

func testAccRdsInstanceV3_basic(val string) string {
	return fmt.Sprintf(`
	data "huaweicloud_availability_zones" "myaz" {}

	resource "huaweicloud_vpc" "myvpc" {
	  name = "rds-test-vpc-%s"
	  cidr = "192.168.0.0/16"
	}
	
	resource "huaweicloud_vpc_subnet" "mysubnet" {
	  vpc_id      = huaweicloud_vpc.myvpc.id
	  name        = "rds-test-subnet-%s"
	  cidr        = "192.168.0.0/18"
	  gateway_ip  = "192.168.0.1"
	  primary_dns = "100.125.1.250"
	}
	
	resource "huaweicloud_networking_secgroup" "mysecgroup" {
	  name        = "rds-test-secgroup-%s"
	  description = "a basic security group"
	}
	
	resource "huaweicloud_rds_instance" "myinstance" {
	  name                = "rds-test-instance-%s"
	  flavor              = "rds.mysql.c2.large.ha"
	  ha_replication_mode = "async"
	  vpc_id              = huaweicloud_vpc.myvpc.id
	  subnet_id           = huaweicloud_vpc_subnet.mysubnet.id
	  security_group_id   = huaweicloud_networking_secgroup.mysecgroup.id
	  availability_zone   = [
		data.huaweicloud_availability_zones.myaz.names[0],
		data.huaweicloud_availability_zones.myaz.names[1]
	  ]
	  time_zone           = "UTC+09:00"
	
	  db {
		type     = "MySQL"
		version  = "8.0"
		password = "Overlord52259"
	  }
	  volume {
		type = "ULTRAHIGH"
		size = 40
	  }
	  backup_strategy {
		start_time = "08:00-09:00"
		keep_days = 1
	  }
	  tags = {
		key = "value"
		foo = "bar"
	  }
	}
	`, val, val, val, val)
}

// volume.size, backup_strategy and tags will be updated
func testAccRdsInstanceV3_update(val string) string {
	return fmt.Sprintf(`
	data "huaweicloud_availability_zones" "myaz" {}

	resource "huaweicloud_vpc" "myvpc" {
	  name = "rds-test-vpc-%s"
	  cidr = "192.168.0.0/16"
	}
	
	resource "huaweicloud_vpc_subnet" "mysubnet" {
	  vpc_id      = huaweicloud_vpc.myvpc.id
	  name        = "rds-test-subnet-%s"
	  cidr        = "192.168.0.0/18"
	  gateway_ip  = "192.168.0.1"
	  primary_dns = "100.125.1.250"
	}
	
	resource "huaweicloud_networking_secgroup" "mysecgroup" {
	  name        = "rds-test-secgroup-%s"
	  description = "a basic security group"
	}
	
	resource "huaweicloud_rds_instance" "myinstance" {
	  name                = "rds-test-instance-%s"
	  flavor              = "rds.mysql.c2.large.ha"
	  ha_replication_mode = "async"
	  vpc_id              = huaweicloud_vpc.myvpc.id
	  subnet_id           = huaweicloud_vpc_subnet.mysubnet.id
	  security_group_id   = huaweicloud_networking_secgroup.mysecgroup.id
	  availability_zone   = [
		data.huaweicloud_availability_zones.myaz.names[0],
		data.huaweicloud_availability_zones.myaz.names[1]
	  ]
	  time_zone           = "UTC+09:00"
	
	  db {
		type     = "MySQL"
		version  = "8.0"
		password = "Overlord52259"
	  }
	  volume {
		type = "ULTRAHIGH"
		size = 50
	  }
	  backup_strategy {
		start_time = "09:00-10:00"
		keep_days = 2
	  }
	  tags = {
		key1 = "value"
		foo = "bar_updated"
	  }
	}
	`, val, val, val, val)
}

func testAccRdsInstanceV3_epsId(val string) string {
	return fmt.Sprintf(`
	data "huaweicloud_availability_zones" "myaz" {}

	resource "huaweicloud_vpc" "myvpc" {
	  name = "rds-test-vpc-%s"
	  cidr = "192.168.0.0/16"
	}
	
	resource "huaweicloud_vpc_subnet" "mysubnet" {
	  vpc_id      = huaweicloud_vpc.myvpc.id
	  name        = "rds-test-subnet-%s"
	  cidr        = "192.168.0.0/18"
	  gateway_ip  = "192.168.0.1"
	  primary_dns = "100.125.1.250"
	}
	
	resource "huaweicloud_networking_secgroup" "mysecgroup" {
	  name        = "rds-test-secgroup-%s"
	  description = "a basic security group"
	}
	
	resource "huaweicloud_rds_instance" "myinstance" {
	  name                = "rds-test-instance-%s"
	  flavor              = "rds.mysql.c2.large.ha"
	  ha_replication_mode = "async"
	  vpc_id              = huaweicloud_vpc.myvpc.id
	  subnet_id           = huaweicloud_vpc_subnet.mysubnet.id
	  security_group_id   = huaweicloud_networking_secgroup.mysecgroup.id
	  availability_zone   = [
		data.huaweicloud_availability_zones.myaz.names[0],
		data.huaweicloud_availability_zones.myaz.names[1]
	  ]
	  enterprise_project_id = "%s"
	  time_zone           = "UTC+09:00"
	
	  db {
		type     = "MySQL"
		version  = "8.0"
		password = "Overlord52259"
	  }
	  volume {
		type = "ULTRAHIGH"
		size = 40
	  }
	  backup_strategy {
		start_time = "08:00-09:00"
		keep_days = 1
	  }
	  tags = {
		key = "value"
		foo = "bar"
	  }
	}
	`, val, val, val, val, HW_ENTERPRISE_PROJECT_ID_TEST)
}

func testAccCheckRdsInstanceV3Destroy(s *terraform.State) error {
	config := testAccProvider.Meta().(*Config)
	client, err := config.RdsV3Client(HW_REGION_NAME)
	if err != nil {
		return fmt.Errorf("Error creating sdk client, err=%s", err)
	}

	for _, rs := range s.RootModule().Resources {
		if rs.Type != "huaweicloud_rds_instance" {
			continue
		}

		v, err := fetchRdsInstanceV3ByListOnTest(rs, client)
		if err != nil {
			return err
		}
		if v != nil {
			return fmt.Errorf("huaweicloud rds instance still exists")
		}
	}

	return nil
}

func testAccCheckRdsInstanceV3Exists() resource.TestCheckFunc {
	return func(s *terraform.State) error {
		config := testAccProvider.Meta().(*Config)
		client, err := config.RdsV3Client(HW_REGION_NAME)
		if err != nil {
			return fmt.Errorf("Error creating sdk client, err=%s", err)
		}

		rs, ok := s.RootModule().Resources["huaweicloud_rds_instance.myinstance"]
		if !ok {
			return fmt.Errorf("Error checking huaweicloud_rds_instance.myinstance exist, err=not found this resource")
		}

		v, err := fetchRdsInstanceV3ByListOnTest(rs, client)
		if err != nil {
			return fmt.Errorf("Error checking huaweicloud_rds_instance.myinstance exist, err=%s", err)
		}
		if v == nil {
			return fmt.Errorf("huaweicloud rds instance is not exist")
		}
		return nil
	}
}

func fetchRdsInstanceV3ByListOnTest(rs *terraform.ResourceState,
	client *golangsdk.ServiceClient) (interface{}, error) {

	identity := map[string]interface{}{"id": rs.Primary.ID}

	queryLink := "?id=" + identity["id"].(string)

	link := client.ServiceURL("instances") + queryLink

	return findRdsInstanceV3ByList(client, link, identity)
}
